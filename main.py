import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.methods import DeleteWebhook
import requests

from settings.correct_messages import split_message
from settings.translate import translate_to_rus, translate_to_english

from settings.db_model import start_db_model, read_db_model, update_db_model, read_db_visualmodel, update_db_visualmodel
from settings.db_history import save_db_history, load_db_history, clear_db_history

from settings.buttons import get_inline_keyboard, get_setvismodel_keybord
from settings.tokn import TELEGRAM_TOKEN, URL, HEADERS
from settings.messages import START_MESSAGE, RESTART_MESSAGE, HELP_MESSAGE, ANSWER_PROCESSING, INFO_MESSAGE



logging.basicConfig(level=logging.INFO)
bot = Bot(TELEGRAM_TOKEN)
dp = Dispatcher()    


#? –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
@dp.message(CommandStart())
async def command_start(message: types.Message):
    """‚Å°‚Å¢‚Å£‚Å£–ù–∞—á–æ–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    start_db_model(f"@{message.from_user.username}")
    await message.reply(text=START_MESSAGE, parse_mode = 'HTML')

@dp.message(Command("restart"))
async def cmd_start(message: types.Message):
    """‚Å°‚Å¢‚Å£‚Å£–ö–æ–º–∞–Ω–¥–∞ start"""
    start_db_model(f"@{message.from_user.username}")
    await message.reply(text=RESTART_MESSAGE, parse_mode = 'HTML')

    
@dp.message(Command("help"))
async def help(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ help"""
    await message.reply(text=HELP_MESSAGE, parse_mode="HTML")
    

@dp.message(Command("info"))
async def info(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    await message.reply(text=INFO_MESSAGE, parse_mode="HTML")


#! ------ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ã–±–æ—Ä–∞/–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–¥–µ–ª–µ–π -----
#? –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –º–æ–¥–µ–ª—å:
@dp.message(Command("model"))
async def get_model(message: types.Message):
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
    model = read_db_model(username=f"@{message.from_user.username}")
    await message.reply(text=f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model}", parse_mode="HTML")
    
@dp.message(Command("visualmodel"))
async def get_visualmodel(message: types.Message):
    visual_model = read_db_visualmodel(username=f"@{message.from_user.username}")
    await message.reply(text=f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ: {visual_model}", parse_mode="HTML")
    
    
#? –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
@dp.message(Command("setmodel"))    
async def setmodel(message: types.Message):
    """–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    await message.reply(text="–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", reply_markup=get_inline_keyboard())
    
@dp.message(Command("setvisualmodel"))    
async def setvisualmodel(message: types.Message):
    """–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    await message.reply(text="–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", reply_markup=get_setvismodel_keybord())

@dp.callback_query()
async def callback_setmodel(callback: types.CallbackQuery):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    await callback.message.edit_reply_markup(reply_markup=None)
    data = callback.data
    if data != "cancel":
        if data in ["meta-llama/Llama-3.2-90B-Vision-Instruct", "Qwen/Qwen2-VL-7B-Instruct"]:
            update_db_visualmodel(username=f"@{callback.from_user.username}", visualmodel=data)
        else:
            update_db_model(username=f"@{callback.from_user.username}", model=data)
        await callback.message.answer(text=f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {data}", parse_mode="HTML")
    else:
        await callback.message.answer(text="/cancel", parse_mode="HTML")


#! ---- –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ ----
@dp.message(Command("clear"))
async def clear(message: types.Message):
    clear_db_history(username=f"@{message.from_user.username}")
    await message.reply(text="–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞ üßπ", parse_mode="HTML")
    


#! ---- –°–∞–º–∏ –∑–∞–ø—Ä–æ—Å—ã ----
#? –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message(lambda message: message.text)
async def filter_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    
    username = f"@{message.from_user.username}"
    message_text = message.text
    
    print("-" * 185)
    print(f"{username} question: {message_text}") #? –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_db_history(username=username, role="user", content=message_text)


        process_mes = await message.reply(text=f"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, @{username}!\n{ANSWER_PROCESSING}", parse_mode="HTML")


        model = read_db_model(username=username)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        messages = load_db_history(username)
        messages.insert(0, {"role": "system", "content": "–¢—ã –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–π –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫"})
        messages.append({"role": "user", "content": message_text})
        
        # –∑–∞–ø—Ä–æ—Å –∫ API
        data = {
            "model": model,
            "messages": messages
        }
        response = requests.post(URL, headers=HEADERS, json=data)
        data = response.json()


        print(f"Response code: {response}") #? –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("-" * 185)

        text = data['choices'][0]['message']['content']
        bot_text = text.split('</think>\n\n')[1] if "</think>" in text else text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
        save_db_history(username=username, role="assistant", content=text)
        await bot.delete_message(chat_id=message.chat.id, message_id=process_mes.message_id)
        for text in split_message(message=bot_text):
            await message.reply(text, parse_mode="Markdown")
            
    except Exception as e:
        await message.answer(text="–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n–ú—ã —É–∂–µ —Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Geniusmediocrity")
        print(e)


#? –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message(lambda message: message.photo)
async def handle_message(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π """
    
    username = f"@{message.from_user.username}"
    question = translate_to_english(text=message.text) if message.text else "What is in this image?"
    process_mes = await message.reply(text=f"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, {username}!\n{ANSWER_PROCESSING}", parse_mode="HTML")
    
    file_id = message.photo[-1].file_id # ‚Å°‚Å¢‚Å£‚Å£–ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞‚Å°
    file = await bot.get_file(file_id)
    file_path = file.file_path
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}" # ‚Å°‚Å¢‚Å£‚Å£–ü–æ–ª—É—á–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Å°
    
    print("-" * 185)
    print(f"{username} photo: {file_url}\nquestion: {question}") #? –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –∑–∞–ø—Ä–æ—Å –∫ API
    visual_model = read_db_visualmodel(username=username)
    data = {
        "model": visual_model, 
        "messages": [
            {"role": "system", 
             "content": "You're a helpful AI assistant"},
            
            {"role": "user", 
             "content": [
                {"type": "text", "text": question},
                {"type": "image_url", "image_url": {"url": file_url}}
            ]
            }
        ]
    }
    
    response = requests.post(URL, json=data, headers=HEADERS)    
    data = response.json()
    text = translate_to_rus(text=data["choices"][0]["message"]["content"]) # ‚Å°‚Å¢‚Å£‚Å£–ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ ‚Å°‚Å¢‚Å£‚Å£JSON —Ñ–∞–π–ª–∞‚Å° –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ
    
        
    print(f"Response code: {response}")     #? –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("-" * 185)
    
    await bot.delete_message(chat_id=message.chat.id, message_id=process_mes.message_id)
    await message.reply(text=text, parse_mode="HTML") # ‚Å°‚Å¢‚Å£‚Å£–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞‚Å°



async def main():
    """–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç"""
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
