import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.methods import DeleteWebhook
import requests

from settings.correct_messages import CorrectMessages

from settings.read_files import read_file

from settings.DB_connect import DataBase

from settings.buttons import Buttons
from settings.config import Config
from settings.messages import Messages



logging.basicConfig(level=logging.INFO)

bot = Bot(Config.TELEGRAM_TOKEN)
dp = Dispatcher()    
DB = DataBase(database="db/DataBase.db") #? –∫–æ–Ω–Ω–µ–∫—Ç —Å –ë–î


#? –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
@dp.message(CommandStart())
async def command_start(message: types.Message):
    """‚Å°‚Å¢‚Å£‚Å£–ù–∞—á–∞–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    DB.start_db_model(user_id=message.from_user.id)
    await message.reply(text=Messages.START_MESSAGE, parse_mode = 'HTML')

@dp.message(Command("restart"))
async def cmd_start(message: types.Message):
    """‚Å°‚Å¢‚Å£‚Å£–ö–æ–º–∞–Ω–¥–∞ start"""
    DB.start_db_model(user_id=message.from_user.id)
    await message.reply(text=Messages.RESTART_MESSAGE, parse_mode = 'HTML')

    
@dp.message(Command("help"))
async def help(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ help"""
    await message.reply(text=Messages.HELP_MESSAGE, parse_mode="HTML")
    

@dp.message(Command("info"))
async def info(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    await message.reply(text=Messages.INFO_MESSAGE, parse_mode="HTML")


#! ------ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ã–±–æ—Ä–∞/–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–¥–µ–ª–µ–π -----
#? –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –º–æ–¥–µ–ª—å:
@dp.message(Command("model"))
async def get_model(message: types.Message):
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
    model = DB.read_db_model(user_id=message.from_user.id)
    await message.reply(text=f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model}", parse_mode="HTML")
    
@dp.message(Command("visualmodel"))
async def get_visualmodel(message: types.Message):
    visual_model = DB.read_db_visualmodel(user_id=message.from_user.id)
    await message.reply(text=f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ: {visual_model}", parse_mode="HTML")
    
    
#? –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
@dp.message(Command("setmodel"))    
async def setmodel(message: types.Message):
    """–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    await message.reply(text="–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", reply_markup=Buttons.get_inline_keyboard())
    
@dp.message(Command("setvisualmodel"))    
async def setvisualmodel(message: types.Message):
    """–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    await message.reply(text="–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", reply_markup=Buttons.get_setvismodel_keybord())

@dp.callback_query()
async def callback_setmodel(callback: types.CallbackQuery):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    await callback.message.edit_reply_markup(reply_markup=None)
    data = callback.data
    if data != "cancel":
        if data in ["meta-llama/Llama-3.2-90B-Vision-Instruct", "Qwen/Qwen2-VL-7B-Instruct"]:
            DB.update_db_visualmodel(user_id=callback.from_user.id, visualmodel=data)
        else:
            DB.update_db_model(user_id=callback.from_user.id, model=data)
        await callback.message.answer(text=f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {data}", parse_mode="HTML")
    else:
        await callback.message.answer(text="/cancel", parse_mode="HTML")


#! ---- –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ ----
@dp.message(Command("clear"))
async def clear(message: types.Message):
    DB.clear_db_history(user_id=message.from_user.id)
    await message.reply(text="–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞ üßπ", parse_mode="HTML")
    
    
@dp.message(Command("sendall"))
async def sendall(message: types.Message):
    if message.from_user.id == 7314948275:
        text = message.text[9: ]
        for user_id in DB.get_db_users():
            try:
                await bot.send_message(chat_id=user_id[0], text=text)
            except:
                DB.delete_db_user(user_id=user_id)
        print("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                

#! ---- –°–∞–º–∏ –∑–∞–ø—Ä–æ—Å—ã ----
#? –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message(lambda message: message.text)
async def filter_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    
    user_id = message.from_user.id
    message_text = message.text
    
    print("-" * 185)
    print(f"{user_id} question: {message_text}") #? –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        DB.save_db_history(user_id=user_id, role="user", content=message_text)


        process_mes = await message.reply(text=f"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, @{message.from_user.username}!\n{Messages.ANSWER_PROCESSING.format("40")}", parse_mode="HTML")


        model = DB.read_db_model(user_id=user_id)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        messages = DB.load_db_history(user_id)
        messages.insert(0, {"role": "system", "content": "–¢—ã –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–π –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫"})
        messages.append({"role": "user", "content": message_text})
        
        # –∑–∞–ø—Ä–æ—Å –∫ API
        data = {
            "model": model,
            "messages": messages
        }
        response = requests.post(Config.URL, headers=Config.HEADERS, json=data)
        data = response.json()


        print(f"Response code: {response}") #? –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("-" * 185)

        text = data['choices'][0]['message']['content']
        bot_text = text.split('</think>\n\n')[1] if "</think>" in text else text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
        DB.save_db_history(user_id=user_id, role="assistant", content=text)
        
        await bot.delete_message(chat_id=message.chat.id, message_id=process_mes.message_id)
        
        for text in CorrectMessages.split_message(message=bot_text):
            await message.reply(text, parse_mode="Markdown")
            
    except Exception as e:
        await message.answer(text="–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n–ú—ã —É–∂–µ —Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Geniusmediocrity")
        print(e)


#? –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message(lambda message: message.photo)
async def handle_message(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π """
    user_id = message.from_user.id
    process_mes = await message.reply(text=f"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, @{message.from_user.username}!\n{Messages.ANSWER_PROCESSING.format("60")}", parse_mode="HTML")
    question = CorrectMessages.translate_to_english(text=message.caption) if message.caption else "What is in this image?"
    
    file_id = message.photo[-1].file_id # ‚Å°‚Å¢‚Å£‚Å£–ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞‚Å°
    file = await bot.get_file(file_id)
    file_path = file.file_path
    file_url = f"https://api.telegram.org/file/bot{Config.TELEGRAM_TOKEN}/{file_path}" # ‚Å°‚Å¢‚Å£‚Å£–ü–æ–ª—É—á–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Å°
    
    print("-" * 185)
    print(f"{user_id} photo: {file_url}\nquestion: {question}") #? –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        DB.save_db_history(user_id=user_id, role="user", content=f"Photo: {file_url}. {question}")
        
        
        # –∑–∞–ø—Ä–æ—Å –∫ API
        visual_model = DB.read_db_visualmodel(user_id=user_id)
        data = {
            "model": visual_model, 
            "messages": [
                {"role": "system", 
                "content": "You're a helpful AI assistant"},
                
                {"role": "user", 
                "content": [
                    {"type": "text", "text": question},
                    {"type": "image_url", "image_url": {"url": file_url}}
                ]
                }
            ]
        }
        
        response = requests.post(Config.URL, json=data, headers=Config.HEADERS)    
        data = response.json()
        text = CorrectMessages.translate_to_rus(text=data["choices"][0]["message"]["content"]) # ‚Å°‚Å¢‚Å£‚Å£–ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ ‚Å°‚Å¢‚Å£‚Å£JSON —Ñ–∞–π–ª–∞‚Å° –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ
        
            
        print(f"Response code: {response}") #? –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("-" * 185)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
        DB.save_db_history(user_id=user_id, role="assistant", content=text)
        
        await bot.delete_message(chat_id=message.chat.id, message_id=process_mes.message_id)
        await message.reply(text=text, parse_mode="HTML") # ‚Å°‚Å¢‚Å£‚Å£–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞‚Å°
        
    except Exception as e:
        await message.reply(text="–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n–ú—ã —É–∂–µ —Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Geniusmediocrity")
        print(e)
        
        
#? –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@dp.message(lambda message: types.File)
async def handle_document(message: types.Message):
    
    ALLOWED_EXTENSIONS = ['.txt', '.doc', '.docx', ".xml", ".html", ".xlsx", ".csv", ".json"]
    document = message.document

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    file_name = document.file_name
    process_mes = await message.reply(text=f"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, @{message.from_user.username}!\n{Messages.ANSWER_PROCESSING.format("45")}", parse_mode="HTML")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    if any(file_name.endswith(ext) for ext in ALLOWED_EXTENSIONS):
        # –ü–æ–ª—É—á–∞–µ–º file_id –¥–æ–∫—É–º–µ–Ω—Ç–∞
        file_id = document.file_id

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(file_id)
        file_path = file.file_path

        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        save_path = f"user_files/{file_name}"

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        await bot.download_file(file_path=file_path, destination=save_path)

        try:
            #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            text = read_file(file_path=save_path) # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            await message.reply(text="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:", parse_mode="HTML")
            
            if file_name.endswith(".xlsx") or file.endswith(".csv"):
                for txt in text:
                    await message.reply(text=txt, parse_mode="HTML") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    
            else:
                for txt in CorrectMessages.split_message(text):
                    await message.reply(text=txt, parse_mode="HTML") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                
        except Exception as e:
            await message.reply(text="–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n–ú—ã —É–∂–µ —Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Geniusmediocrity", parse_mode="HTML")
            print(e)
    else:
        # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        await message.reply(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt, .doc –∏–ª–∏ .docx.", parse_mode="HTML")
    await bot.delete_message(chat_id=message.chat.id, message_id=process_mes.message_id)


async def main():
    """–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç"""
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
